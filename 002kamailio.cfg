#!KAMAILIO


####### Global Parameters #########
#Nivel de debug de Kamailio. Para hacer debug poner a 4. Más es la locura.
### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR

debug=2
log_stderror=no

#Facility para syslog. Con eso después se puede filtrar a fichero
log_facility=LOG_LOCAL0


#Número de procesos a arrancar por cada IP, transporte y puerto
fork=yes
children=4

# Port LISTEN
port=5060

#No queremos resolución inversa de la IP como dominio local
auto_aliases=no

#Algunas directivas para el cliente de DNS
#http://www.kamailio.org/wiki/cookbooks/4.2.x/core#dns_parameters
use_dns_cache=on
use_dns_failover=on
dns_srv_lb=on

kamailio.ip = "192.168.15.156" desc "Kamailio IP Address"
asterisk.ip = "192.168.98.4" desc "Asterisk IP Address"


####### Modules Section ########

mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules"
#mpath="/usr/lib/i386-linux-gnu/kamailio/modules"

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"

#loadmodule "domain.so"
loadmodule "htable.so"
loadmodule "pike.so"
loadmodule "path.so"


####### Setting module-specific parameters #######

# Estos dos modparam no son necesarios pero ahorran algún problema con algunos UA
modparam("rr", "enable_full_lr", 1)

#modparam("domain", "db_url", "mysql://kamailio-user:kamailio-pass@localhost/kamailoo")

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/ctl.proxy.sock")
modparam("ctl", "mode", 0666)
modparam("ctl", "user", "kamailio")
modparam("ctl", "group", "kamailio")

# ----- mi_fifo params -----
# Ponemos los sockets en /var/run/kamailio y hacemos que el user y group sea kamailio para evitar problemas de seguridad y de permisos
modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio.proxy.fifo")
modparam("mi_fifo", "fifo_mode", 0666)
modparam("mi_fifo", "fifo_user", "kamailio")
modparam("mi_fifo", "fifo_group", "kamailio")

# ---- pike params -----
# Vamos a usar pike + htable para banear durante 300 segundos las IPs que superen 50 peticiones en 5 segundos.
modparam("pike", "sampling_time_unit", 5)
modparam("pike", "reqs_density_per_unit", 50)
modparam("pike", "remove_latency", 4)
modparam("pike", "pike_log_level", 4)

# ---- htable params -----
modparam("htable", "htable", "ipban=>size=8;autoexpire=300")



####### Routing Logic ########

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	# checks iniciales
	route(REQINIT);

	xlog("L_INFO", "New request - M=$rm R=$ru F=$fu IP=$si:$sp ID=$ci\n");


	# CANCEL processing
	# Lo primero se van a procesar los CANCEL. Se comprueba si existe transacción. Si existe se ruta y si no se descarta.
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
			exit;
		}
		exit;
	}

	# handle requests within SIP dialogs
	# Se identifica una request indialog mediante la detección de la existencia del parámetro to-tag. Si tiene totag, la request es indialog.
	# Mandamos las request indialog a una ruta específica y dejamos pasar las initial request.
	if (has_totag()){
		route(WITHINDLG);
		exit;
	}

	### only initial requests (no To tag)

	# handle retransmissions
	# Comprobamos si la request está siendo atendida por otro proceso. Si es así, es una retransmisión y mandamos la última respuesta enviada. Si no es así dejamos pasar.
	# Leer la doc de la función t_check_trans porque actúa de forma diferente en función del método y en función de si existe la transacción.
	#http://kamailio.org/docs/modules/4.2.x/modules/tm.html#tm.f.t_check_trans
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}
	t_check_trans();


	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")){
		record_route();
	}

	# handle registrations
	if (is_method("REGISTER")){
		if(!add_path()){
			sl_send_reply("503","Internal error server");
			exit;
		}
	}

	#asterisk.dst_ip
	if($si != $sel(cfg_get.asterisk.ip) ) {
		$du="sip:" + $sel(cfg_get.asterisk.ip);
		xlog("L_INFO", "add path nueva cabezera $du \n");
	}
	route(RELAY);
}


# Per SIP request initial checks
route[REQINIT] {

	# Hay que sacar de la comprobación peers e ips de confianza
	if($si != $sel(cfg_get.kamailio.ip) || $si != $sel(cfg_get.asterisk.ip) ) {
	# Si existe la entrada para la IP $si en la htable ipban es que la IP ya está baneada
                if($sht(ipban=>$si)!=$null) {
                        # ip is already blocked
                        xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
                        exit;
                }
		# Si no está baneada preguntamos a pike si con esta request se ha superado el umbral.
		# Si no se ha superado dará true y no haremos nada. El script continúa
		# SI se ha superado creamos una entrada en la htable
                if (!pike_check_req()) {
                        xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
                        $sht(ipban=>$si) = 1;
                        exit;
                }
        }

	# Esto no me gusta pero hay gente a la que sí. Se da un falso positivo a sipvicious para hacer que deje de escanear.
        if($ua =~ "friendly-scanner") {
                sl_send_reply("200", "OK");
                exit;
        }


	# Comprobamos los max_forwards y si no existe la cabecera la añadimos.
       	if (!mf_process_maxfwd_header("10")) {
        	sl_send_reply("483","Too Many Hops");
                exit;
        }

        if(is_method("OPTIONS") && $rU==$null) {
                sl_send_reply("200","Keepalive");
		xlog("L_INFO", "add keepalive 200  - $rU \n");
                exit;
        }

	# Hacer comprbaciones para detectar paquetes malformados ya sea por error, por incompetencia o por mailicia
        # doc: http://kamailio.org/docs/modules/4.2.x/modules/sanity#sanity.overview
        if(!sanity_check("1511", "7")) {
                xlog("Malformed SIP message from $si:$sp\n");
                exit;
        }

	# Filtrado arbitrario de métodos.
	if(!is_method("INVITE|ACK|CANCEL|BYE|OPTIONS|PRACK|UPDATE|REGISTER")) {
		sl_send_reply("405","Method not supported here");
		exit;
	}
}


route[RELAY] {
	# Esta es la ruta para mandar la request a donde marque el ruri. Antes de llamarla habremos hecho todo lo necesario para que $ru o $du estén poblados
        # $ru será la reuquest uri y se ruta en función de ella a no ser que hayamos seteado $du, en cuyo caso se rutará ahí independientemente de $ru

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}


# Handle requests within SIP dialogs
route[WITHINDLG] {
	# sequential request withing a dialog should
	# take the path determined by record-routing
	# Comprobamos que loose_route devuelve true. Si no, a excepción de un corner case, vamos a devolver una repueta negativa.
	# Leer la doc de la función para entender lo que hace:
	# http://kamailio.org/docs/modules/4.2.x/modules/rr.html#loose-route-id
	# http://www.iptel.org/sip/intro/scenarios/rr/strict_vs_loose

	if (loose_route()) {
		if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404", "Not here");
	exit;
}
